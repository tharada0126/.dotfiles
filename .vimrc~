set nocompatible
filetype off

if has('vim_starting')
	set runtimepath+=~/.vim/neobundle.vim.git
	call neobundle#rc(expand('~/.vim/.bundle'))
endif

NeoBundle 'git://github.com/tpope/vim-surround.git'
NeoBundle 'git://github.com/tpope/vim-repeat.git'
NeoBundle 'git://github.com/Shougo/neocomplcache.git'
NeoBundle 'git://github.com/Shougo/unite.vim.git'
NeoBundle 'git://github.com/mattn/emmet-vim.git'
NeoBundle 'git://github.com/motemen/git-vim.git'
NeoBundle 'git://github.com/scrooloose/nerdtree.git'
NeoBundle 'git://github.com/majutsushi/tagbar.git'
NeoBundle 'git://github.com/nanotech/jellybeans.vim'
"NeoBundle 'Markdown'
"NeoBundle 'git://github.com//vim-instant-markdown.git'
"NeoBundle 'tpope/vim-markdown'
NeoBundle 'tyru/open-browser.vim'
"NeoBundle 'thinca/vim-quickrun'
NeoBundle 'vim-scripts/vim-auto-save'
NeoBundle 'kannokanno/previm'
"NeoBundle 'syui/cscroll.vim'
NeoBundle 'kana/vim-submode'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'HybridText'

NeoBundle 'git://github.com/fuenor/im_control.vim'
"NeoBundle 'im_control', {'type' : 'nosync', 'base' : '~/.vim/.bundle/manual'}

filetype plugin indent on

set number
set showmode
set title
set ruler
set list
set listchars=tab:>\ ,extends:<
set laststatus=2

set autoindent
set smartindent
"set expandtab
set smarttab
set tabstop=4
set shiftwidth=4
set showmatch
set wildmenu
set clipboard=unnamed
set autoread
set hidden
set showcmd
set backspace=indent,eol,start
set browsedir=buffer
set incsearch
set ignorecase
set smartcase
set whichwrap=b,s,h,l,<,>,[,]
set nowrapscan
set cmdheight=2
set wrap
set linebreak
set nolist
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

augroup InsertHook
autocmd!
autocmd InsertEnter * highlight StatusLine guifg=#ccdc90 guibg=#2E4340
autocmd InsertLeave * highlight StatusLine guifg=#2E4340 guibg=#ccdc90
augroup END


:set encoding=utf-8
:set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis
:set fileformats=unix,dos,mac

nnoremap <silent> fb :<C-u>Unite buffer<CR>
nnoremap <silent> ff :<C-u>UniteWithBufferDir -buffer-name=dotfiles file<CR>
nnoremap <silent> fr :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> fm :<C-u>Unite file_mru<CR>
nnoremap <silent> C :%!astyle -pST<CR>
let IM_CtrlMode = 4
inoremap <silent> <C-j> <C-^><C-r>=IMState('FixMode')<CR>lBufLocalMode = 1

"--------------------QuickRun--------------------"
"let g:quickrun_config = {}
"let g:quickrun_config['markdown'] = {
"	\ 'outputter' : 'browser',
"	\ }
"let g:quickrun_config['vim'] = { 
"	\ 'hook/output_encode/enable' : 1,
"	\ 'hook/output_encode/encoding' : 'utf-8',
"	\}
"	
" Markdown Preview
" <F7>でプレビュー
nnoremap <silent> <F7> :PrevimOpen<CR> \| :silent !open -a MacVim <CR>
let g:previm_disable_default_css = 1
let g:previm_custom_css_path = '/Users/Harada/Downloads/github.css'
 
" プレビューと同時にフォーカスをiTerm2に戻したければ､以下を参考にします """{{{
" ただし、注意として､「command -bar PrevimOpen...」のように「-bar」オプションを付ける必要があります。
" http://mba-hack.blogspot.jp/2013/09/mac.html
" nnoremap <silent> <F7> :PrevimOpen \|:silent !open -a MacVim <CR>
"
"""}}}
 
" [,]+j+j+j...で下にスクロール、[,]+k+k+k...で上にスクロール
"nnoremap <silent> <Leader>j :ChromeScrollDown<CR>
"nnoremap <silent> <Leader>k :ChromeScrollUp<CR>
"call submode#enter_with('cscroll', 'n', '', '<Leader>j', ':ChromeScrollDown<CR>')
"call submode#enter_with('cscroll', 'n', '', '<Leader>k', ':ChromeScrollUp<CR>')
"call submode#leave_with('cscroll', 'n', '', 'n')
"call submode#map('cscroll', 'n', '', 'j', ':ChromeScrollDown<CR>')
"call submode#map('cscroll', 'n', '', 'k', ':ChromeScrollUp<CR>')
 
" 現在のタブを閉じる
"nnoremap <silent> <Leader>q :ChromeTabClose<CR>
" [,]+f+{char}でキーを Google Chrome に送る
" nnoremap <buffer> <Leader>f :ChromeKey<Space>--------------------QuickRun--------------------"

noremap <Leader><Leader> :up<CR>
"lBufLocalMode = 1
nnoremap <Space> jzz
nnoremap <S-Space> kzz
noremap <CR> o<ESC>

nnoremap j gj
nnoremap k gk

if has('mac')
	let g:tagbar_ctags_bin='/usr/local/bin/ctags'
	nmap <C-n> :NERDTree<CR>
	nnoremap <silent> <C-s> :TagbarToggle<CR>
	"nmap <C-S-b> :make<CR>
	:set noimdisableactivate
endif
"autocmd BufEnter * if &filetype === "" | setlocal ft=hybrid | endif

"au BufNewFile,BufRead *.hs	set nowrap tabstop=2 shiftwidth=2 expandtab
au BufNewFile,BufRead *.tex	set spell
au BufNewFile,BufRead *.tex	setfiletype tex

set spelllang+=cjk


autocmd BufRead,BufNewFile *.mkd setfiletype markdown
autocmd BufRead,BufNewFile *.md setfiletype markdown

source ~/.vim/bundle/vundle/test/minirc.vim
